# import cv2
import numpy as np
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv2D
from keras.optimizers import Adam

from PIL import Image

import matplotlib.pyplot as plt

import os
import datetime
import h5py

def train():
    srcnn_model = model()
    print(srcnn_model.summary())


def model():
    SRCNN = Sequential()
    #conv2d(마스크개수, kernal_size, input_shape, activation)
    SRCNN.add(Conv2D(64, kernel_size=(9,9), input_shape=(32, 32, 1), padding='same', activation='relu', init='glorot_uniform', bias='true'))
    SRCNN.add(Conv2D(64, kernel_size=(1,1),                       padding='same', activation='relu', init='glorot_uniform', bias='true'))
    SRCNN.add(Conv2D(32, kernel_size=(5,5),                        padding='same',init='glorot_uniform', bias='true'))
    adam = Adam(learning_rate=0.0003)
    SRCNN.compile(optimizer=adam, loss='mean_squared_error',metrics=['mean_squared_error'])
    return SRCNN

def crop_test():
    im_gray = Image.open('train/t1.bmp').convert('L') #197x176(가로 x 세로)
    pix = np.array(im_gray)

    im_crop1 = tf.image.random_crop(pix, (32, 32), 1)
    im_crop2 = tf.image.random_crop(pix, (32, 32), 1)
    im_crop3 = tf.image.random_crop(pix, (32, 32), 1)
    fig = plt.figure()
    ax1 = fig.add_subplot(1, 3, 1)
    ax2 = fig.add_subplot(1, 3, 2)
    ax3 = fig.add_subplot(1, 3, 3)
    ax1.imshow(im_crop1)
    ax2.imshow(im_crop2)
    ax3.imshow(im_crop3)
    plt.show()
def bicubic_test():
    im_gray = Image.open('train/t1.bmp').convert('L')  # 197x176(가로 x 세로)
    # pix = np.array(im_gray)

    param_scale = 2
    im_crop_tmp = tf.image.crop_and_resize(im_gray, (32, 32, 60, 60), box_ind=)

    plt.imshow(im_crop_tmp)
    plt.show()
    # t = np.array(im_crop_tmp)
    # im_crop = Image.fromarray(t)
    # im_bicubic_tmp = im_crop_tmp.resize((32//param_scale,32//param_scale), Image.BICUBIC )
    # im_bicubic = im_bicubic_tmp.resize((32, 32), Image.BICUBIC)

    # fig = plt.figure()
    # ax1 = fig.add_subplot(1, 2, 1)
    # ax2 = fig.add_subplot(1, 2, 2)
    # ax1.imshow(im_crop_tmp)
    # ax2.imshow(im_bicubic)
    # plt.show()

def make_image_set(sample_num, patch_size, scale_size):
    input_data = []
    label_data = []
    path = "./train"
    file_list = os.listdir(path)
    for file_num in range(len(file_list)): #해당 path에 있는 data 전부
        im_gray = Image.open(path + "/" + file_list[file_num]).convert('L')  # gray scale로 입력
        pix = np.array(im_gray)

        for iter_idx in range(sample_num):
            #data crop
            im_crop_tmp = tf.image.random_crop(pix, (patch_size, patch_size), 1) # image, crop_size, seed_opt
            im_crop = Image.fromarray(np.array(im_crop_tmp)) #array 변환 후 Image 객체로 변환
            im_bicubic_tmp = im_crop.resize((patch_size//scale_size, patch_size//scale_size), Image.BICUBIC)
            im_bicubic = im_bicubic_tmp.resize((patch_size, patch_size), Image.BICUBIC)

            # data 저장
            input_data.append(np.array(im_bicubic))
            label_data.append(np.array(im_crop_tmp))


    now = datetime.datetime.now()
    nowDate = now.strftime('%Y-%m-%d')
    dataset_path = "dataset_"+ nowDate
    if not os.path.isdir(dataset_path):
        os.mkdir(dataset_path)
        f = h5py.File(dataset_path + "/" + 'train_data.hdf5','w')
        f.create_dataset("input_data", data=input_data)
        f.create_dataset("label_data", data=label_data)


def data_load():
    h_file = h5py.File('dataset_2020-04-07/train_data.hdf5','r')
    input_data = h_file.get('input_data')
    label_data = h_file.get('label_data')
    plt.figure(1)
    plt.imshow(input_data[0])
    plt.figure(2)
    plt.imshow(label_data[0])
    plt.show()

if __name__ == "__main__":
    # data_load()

    # make_image_set(1, 32, 2)
    bicubic_test()
    #crop_test()
    # train()
    # test()